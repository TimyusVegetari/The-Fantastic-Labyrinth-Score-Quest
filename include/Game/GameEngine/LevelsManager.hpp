////////////////////////////////////////////////////////////
//
// This file is part of Demiurge.
// Copyright (C) 2016-2017 Acroute Anthony (ant110283@hotmail.fr)
//
// Demiurge is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// Demiurge is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Demiurge.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file LevelsManager.hpp
 * \brief Class to manage the game levels.
 * \author Anthony Acroute
 * \version 0.2
 * \date 2016-2017
 *
 */

#ifndef LEVELSMANAGER_HPP__
#define LEVELSMANAGER_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>

////////////////////////////////////////////////////////////
/// \brief Class to store and manage the game levels.
///
////////////////////////////////////////////////////////////
class LevelsManager : private sf::NonCopyable {

  public :
    ////////////////////////////////////////////////////////////
    // Enumeration
    ////////////////////////////////////////////////////////////
    enum State {
      START,
      RUNNING,
      FINISH
    };

  private:
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    LevelsManager::State  m_eState;           ///< State of the level manager.
    GLuint                m_uiLevelsCount;    ///< Number of the current level.
    GLuint                m_uiStepsCount;     ///< Number of the current step (each 5 levels).
    GLint                 m_iSubLevelsCount;  ///< Number of the current level in the step (0 to 4).

  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines a stack of game levels.
    ///
    ////////////////////////////////////////////////////////////
    LevelsManager ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the game levels.
    ///
    ////////////////////////////////////////////////////////////
    ~LevelsManager ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Initialise the levels manager components.
    ///
    ////////////////////////////////////////////////////////////
    void Initialize ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Increment the levels count.
    ///
    ////////////////////////////////////////////////////////////
    void IncrementLevel ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get a string to display the level number.
    ///
    /// \return A string to display the level number.
    ///
    ////////////////////////////////////////////////////////////
    std::string ToString ( void );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Set the state of the levels manager.
    ///
    /// \param eState   Levels manager state (START, RUNNING, FINISH).
    ///
    ////////////////////////////////////////////////////////////
    void SetState ( LevelsManager::State eState );

    ////////////////////////////////////////////////////////////
    /// \brief Get the state of the levels manager.
    ///
    /// \return The state of the levels manager.
    ///
    ////////////////////////////////////////////////////////////
    LevelsManager::State GetState ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the step of the levels manager.
    ///
    /// \return The step of the levels manager.
    ///
    ////////////////////////////////////////////////////////////
    GLuint GetStepsCount ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Get the level in the step of the levels manager.
    ///
    /// \return The level in the step of the levels manager.
    ///
    ////////////////////////////////////////////////////////////
    GLint GetSubLevelsCount ( void );
};

#endif // LEVELSMANAGER_HPP__
