////////////////////////////////////////////////////////////
//
// This file is part of The Fantastic Labyrinth.
// Copyright (C) 2016 Acroute Anthony (ant110283@hotmail.fr)
//
// The Fantastic Labyrinth is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// The Fantastic Labyrinth is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with The Fantastic Labyrinth.  If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Description for Doxygen
////////////////////////////////////////////////////////////
/**
 * \file AnimatedSprite.hpp
 * \brief Class of a animated sprite.
 * \author Anthony Acroute
 * \version 0.1
 * \date 2016
 *
 */

#ifndef ANIMATEDSPRITE_HPP__
#define ANIMATEDSPRITE_HPP__

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <Game/includes.hpp>

////////////////////////////////////////////////////////////
/// \brief Class of a animated sprite.
///
////////////////////////////////////////////////////////////
class AnimatedSprite : public sf::Drawable, public sf::Transformable {

  protected :
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    std::size_t               m_iCurrentFrameLine,
                              m_iCurrentFrame;
    GLboolean                 m_bIsPaused,
                              m_bIsLooped;
    std::vector<std::vector<sf::IntRect>> m_vFrames;
    const sf::Texture*        m_sfTexture;
    sf::Vertex                m_sfVertices[4];

  public :
    ////////////////////////////////////////////////////////////
    // Constructor(s)/Destructor
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ///
    /// This constructor defines the animated sprite.
    ///
    ////////////////////////////////////////////////////////////
    AnimatedSprite ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ///
    /// Cleans up all the internal resources used by the animated sprite.
    ///
    ////////////////////////////////////////////////////////////
    virtual ~AnimatedSprite ( void );

    ////////////////////////////////////////////////////////////
    // General methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Add a frame in the animation.
    ///
    /// \param iFrameLine   Frame line of the animation.
    ///        sfRect       Rectangle of the frame.
    ///
    ////////////////////////////////////////////////////////////
    void AddFrame ( std::size_t iFrameLine, sf::IntRect sfRect );

    ////////////////////////////////////////////////////////////
    /// \brief Update the current frame of the animation.
    ///
    ////////////////////////////////////////////////////////////
    void Update ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Play the animation.
    ///
    ////////////////////////////////////////////////////////////
    void Play ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Pause the animation.
    ///
    ////////////////////////////////////////////////////////////
    void Pause ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Stop the animation.
    ///
    ////////////////////////////////////////////////////////////
    void Stop ( void );

    ////////////////////////////////////////////////////////////
    /// \brief Draw the animation to a render target
    ///
    /// \param target Render target to draw to
    /// \param states Current render states
    ///
    ////////////////////////////////////////////////////////////
    virtual void draw ( sf::RenderTarget& target, sf::RenderStates states ) const;

    ////////////////////////////////////////////////////////////
    /// \brief Set the current frame of the animation.
    ///
    /// \param iNewframe  New current frame.
    ///
    ////////////////////////////////////////////////////////////
    void SetFrame ( std::size_t iNewFrame );

    ////////////////////////////////////////////////////////////
    // Accessor methods
    ////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////
    /// \brief Set the sprite sheet of the animation.
    ///
    /// \param sfTexture  Sprite sheet of the animation.
    ///
    ////////////////////////////////////////////////////////////
    void SetSpriteSheet ( const sf::Texture& sfTexture );

    ////////////////////////////////////////////////////////////
    /// \brief Set the loop state of the animation.
    ///
    /// \param bLooped  State of the loop of the animation.
    ///
    ////////////////////////////////////////////////////////////
    void SetLooped ( GLboolean bLooped );

    ////////////////////////////////////////////////////////////
    /// \brief Get the local bounds of the animation.
    ///
    /// \return The local bounds of the animation.
    ///
    ////////////////////////////////////////////////////////////
    sf::FloatRect GetLocalBounds ( void ) const;

    ////////////////////////////////////////////////////////////
    /// \brief Get the global bounds of the animation.
    ///
    /// \return The global bounds of the animation.
    ///
    ////////////////////////////////////////////////////////////
    sf::FloatRect GetGlobalBounds ( void ) const;

    ////////////////////////////////////////////////////////////
    /// \brief Get if the animation is looped.
    ///
    /// \return True if the animation is looped, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean IsLooped ( void ) const;

    ////////////////////////////////////////////////////////////
    /// \brief Get if the animation is playing.
    ///
    /// \return True if the animation is playing, false else.
    ///
    ////////////////////////////////////////////////////////////
    GLboolean IsPlaying ( void ) const;

    ////////////////////////////////////////////////////////////
    /// \brief Set the current frame line of the animation.
    ///
    /// \param iNewframeLine  New current frame line.
    ///
    ////////////////////////////////////////////////////////////
    void SetFrameLine ( std::size_t iNewFrameLine );

};

#endif // ANIMATEDSPRITE_HPP__
